from abc import ABC, abstractmethod
from ..SettingsRetrievable import SettingsRetrievable
from ..Workspace import Workspace
from ..Random import Random





class Algorithm(SettingsRetrievable, ABC):

  def setup(self,
            targetPdb: str,
            workspacePath: str):
    """
    Initializes the workspace and the RNG.

    Parameters
    ----------
    targetPdb : str
        The path to the PDB file containing the target protein backbone.
    workspacePath : str
        The folder where all the output files generated by the evolutionary
        algorithm will be stored.
    """
    # initialize the workspace
    workspace = Workspace(workspacePath, targetPdb)

    # initialize the RNG
    rng = Random.generator()
    state = workspace.load_rng_state()
    if not state:
      workspace.save_rng_state(rng.bit_generator.state, checkpoint=False)
    rng.bit_generator.state = state
    
    return

  

  @abstractmethod
  def __call__(self, **kwargs) -> None:
    raise NotImplementedError
